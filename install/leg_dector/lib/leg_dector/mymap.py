import matplotlib.pyplot as plt

def create_map(map = 'room 1'):
    map = map.split(' ')
    if map[0]=='room':
        rec_list = []
        real_list=[]
        if map[1] == '1':
            rec_list=[(4,5,2,15),
                    (4,4,13,2),
                    (18,4,2,2)]
        elif map[1] == '2':
            rec_list=[(-2,-2,2,8),
                    (0,-2,6,2),
                    (0,4,6,2),
                    (4,0,2,1),
                    (4,2,2,2),
                    (12,16,4,2),
                    (12,8,2,8),
                    (14,8,4,2),
                    (16,10,2,2),
                    (16,13,2,5)]
        elif map[1] == '3':
            rec_list=[(8,-3,2,12),
                    (8,11,2,12),
                    (5,10,8,2),
                    (5,7.5,8,2)]
            real_list=[(8.25,-3,1.5,12),
                (8.25,11,1.5,12),
                (5.25,10.25,7.5,1.5),
                (5.25,7.75,7.5,1.5)]
        elif map[1] == '4':
            rec_list=[(2,2,10,2),
                    (2,2,2,14),
                    (2,14,3,2),
                    (13,2,3,2),
                    (14,2,2,14),
                    (6,14,10,2)]
            real_list=[(2.25,2.25,9.5,1.5),
                    (2.25,2.25,1.5,13.5),
                    (2.25,14.25,2.5,1.5),
                    (13.25,2.25,2.5,1.5),
                    (14.25,2.25,1.5,13.5),
                    (6.25,14.25,9.5,1.5)]
        elif map[1] == '5':
            rec_list=[(-2,12,3.5,2),
                    (-2,14,2,6),
                    (0,18,6,2),
                    (2.5,12,3.5,2),
                    (4,14,2,4),
                    (12,-2,8,2),
                    (12,0,2,2),
                    (18,0,2,6),
                    (12,2.5,2,3.5),
                    (14,4,6,2),
                    (5,8,10,2)
                    ]
        elif map[1] == '6':
            rec_list=[(2,4.75,2,15.25),
                    (2,-2,2,6.25),
                    (8,17.75,2,2.25),
                    (8,-2,2,19.25),
                    (15,9.75,2,10.25),
                    (15,-2,2,11.25)
                    ]
            real_list=[(2.25,5,1.5,15),
                    (2.25,-2,1.5,6),
                    (8.25,18,1.5,2.25),
                    (8.25,-2,1.5,19),
                    (15.25,10,1.5,10.25),
                    (15.25,-2,1.5,11)]
        elif map[1] == '7':
            rec_list=[(-2,-2,2,22),
                    (-1,-2,8,2),
                    (-1,5,6,2),
                    (5,1,2,10),
                    (-1,12,8,2),
                    (5,14,2,4),
                    (12,-2,8,2),
                    (12,5,8,2),
                    (12,12,8,2),
                    (12,14,2,4),
                    (12,1,2,10),
                    (18,-2,2,22),
                    (-1,19,20,1)
                    ]
        elif map[1] == '8':
            rec_list=[(1,2,2,20),
                    (1,-2,2,3),
                    (3,10,8,2),
                    (12,10,8,2)
                    ]
            # rec_list=[(0.75,1.75,2.5,20),
            #         (0.75,-4,2.5,5.25),
            #         (3,9.75,8.25,2.5),
            #         (11.75,9.75,8.25,2.5)
            #         ]
            real_list=[(1.25,2.25,1.5,18),
                    (1.25,-2,1.5,2.75),
                    (2.25,10.25,8.5,1.5),
                    (12.25,10.25,8,1.5)]
        elif map[1] == '9':
            rec_list=[(1,4,2,16),
                    (-2,1,16,2),
                    (15,-2,2,16),
                    (4,15,16,2)
                    ]
        elif map[1] == '10':
            rec_list=[(2,5,2,16),
                    (3,5,9,2),
                    (2,-2,10,6.5),
                    (10,7.5,2,14)
                    ]
            real_list=[(2.25,5.25,1.5,15),
                    (2.25,5.25,9.5,1.5),
                    (2.25,-2,9.5,6.25),
                    (10.25,7.75,1.5,15)]
        elif map[1] == '11':
            rec_list=[]
            real_list=[]
        elif map[1] == '12':
            rec_list=[(-2,-2,7,2),
                      (13,-2,7,2),
                      (-2,0,2,20),
                      (18,0,2,20),
                      (0,8,5,2),
                      (13,8,5,2),
                      (0,18,5,2),
                      (13,18,5,2),
                      (5,-2,2,5.75),
                      (11,-2,2,5.75),
                      (5,4.25,2,9.5),
                      (11,4.25,2,9.5),
                      (5,14.25,2,5.75),
                      (11,14.25,2,5.75)]
            real_list=[(-2,-2,8,1.75),
                  (12.75,-2,8,1.75),
                  (-2,-0.25,1.75,21),
                  (18.25,-0.25,1.75,21),
                  (-0.25,8.25,6,1.5),
                  (12.75,8.25,6,1.5),
                  (-0.25,18.25,6,2),
                  (12.75,18.25,6,2),
                  (5.25,-2,1.5,5.5),
                  (11.25,-2,1.5,5.5),
                  (5.25,4.5,1.5,9),
                  (11.25,4.5,1.5,9),
                  (5.25,14.5,1.5,5.5),
                  (11.25,14.5,1.5,5.5)]
        elif map[1] == '13':
            rec_list=[(-2,4,2.75,10),
                      (1.25,4,15.5,10),
                      (4,-2,10,2.75),
                      (4,1.25,10,15.5),
                      (4,17.25,10,2.75),
                      (17.25,4,2.75,10)
                      ]
            real_list=[(-2,4.25,2.5,9.5),
                      (1.5,4.25,15,9.5),
                      (4.25,-2,9.5,2.5),
                      (4.25,1.5,9.5,15),
                      (4.25,17.5,9.5,2.5),
                      (17.5,4.25,2.75,9.5)]
        elif map[1] == '14':
            rec_list=[(4,4.75,2,15.25),
                    (4,-2,2,6.25),
                    (13,14.75,2,10.25),
                    (13,-2,2,16.25)
                    ]
            real_list=[(4.25,5,1.5,15),
                    (4.25,-2,1.5,6),
                    (13.25,15,1.5,10.25),
                    (13.25,-2,1.5,16)]
        elif map[1] == '15':
            rec_list=[(-2,1,5,2),
                    (3.5,1,20,2),
                    (10,17.5,2,5),
                    (10,7,2,10),
                    (10,12.5,12,2)
                    ]
            real_list=[(-2,1.25,4.75,1.5),
                    (3.75,1.25,20,1.5),
                    (10.25,17.75,1.5,5),
                    (10.25,7.25,1.5,9.5),
                    (10.25,12.75,12,1.5)
                    ]
        elif map[1] == '16':
            rec_list=[(8,-0.5,4,6),
                    (8,6,4,6),
                    (8,12.5,4,6),
                    (12.5,-0.5,4,6),
                    (12.5,6,4,6),
                    (12.5,12.5,4,6),
                    ]
            real_list=[(8.25,-0.25,3.5,5.5),
                    (8.25,6.25,3.5,5.5),
                    (8.25,12.75,3.5,5.5),
                    (12.75,-0.25,3.5,5.5),
                    (12.75,6.25,3.5,5.5),
                    (12.75,12.75,3.5,5.5),
                    ]
        elif map[1] == '17':
            rec_list=[(3.5,-0.5,4,6),
                    (3.5,6,4,6),
                    (3.5,12.5,4,6),
                    (8,-0.5,4,6),
                    (8,6,4,6),
                    (8,12.5,4,6),
                    (12.5,-0.5,4,6),
                    (12.5,6,4,6),
                    (12.5,12.5,4,6),
                    ]
            real_list=[(3.75,-0.25,3.5,5.5),
                    (3.75,6.25,3.5,5.5),
                    (3.75,12.75,3.5,5.5),
                    (8.25,-0.25,3.5,5.5),
                    (8.25,6.25,3.5,5.5),
                    (8.25,12.75,3.5,5.5),
                    (12.75,-0.25,3.5,5.5),
                    (12.75,6.25,3.5,5.5),
                    (12.75,12.75,3.5,5.5),
                    ]

        return rec_list, real_list

    elif map[0]=='circle':
        cir_list = []
        if map[1]=='1':
            cir_list=[(5,2,1.5),
                    (12,2,3),
                    (3,9,2),
                    (9,11,2),
                    (7.5,6,2.5),]
        return cir_list
    
def main():
    rec_obstacle_list = []
    cir_obstacle_list = []



    room_number = 'room 11' # simulation II room 14 & room 16
    rec_obstacle_list, real_ob_list= create_map(room_number)
    # cir_obstacle_list = create_map('circle 1')
    
    fig = plt.figure(figsize=(8,8))
    for (x,y,w,h) in rec_obstacle_list:
        rectangle = plt.Rectangle((x,y),w,h,color='aqua')
        plt.gca().add_patch(rectangle)
    
    for (x,y,w,h) in real_ob_list:
        rectangle = plt.Rectangle((x,y),w,h,color='black')
        plt.gca().add_patch(rectangle)

    #取得AuxiliaryNodes
    try:
        f= open('MAP/' + room_number + '_AuxiliaryNodes.txt','r')
        auxiliary_nodes_str = f.read()
        f.close()
        lines = auxiliary_nodes_str.strip().split("\n")
        auxiliary_nodes = []
        for line in lines:
            nums = line.strip("()").split(",")
            x = round(float(nums[0]), 2)
            y = round(float(nums[1]), 2)
            auxiliary_nodes.append([x, y])

        for auxiliary_node in auxiliary_nodes:
            plt.annotate(f"S",(auxiliary_node[0]-0.25,auxiliary_node[1]+0.5),fontsize=20,color='Magenta',weight='bold')
            plt.plot(auxiliary_node[0],auxiliary_node[1],'o',color='Magenta')

    except:
        pass

    # for (ox,oy,size) in cir_obstacle_list:
    #     circle = plt.Circle((ox,oy), size, color='black')
    #     plt.gca().add_patch(circle)

    # start
    x1=18
    y1=15.5

    # target
    x2=18
    y2=10
    
    plt.plot(x1,y1,'ob')
    plt.annotate(' Start',(x1-1.5,y1+0.6),fontsize=20,color='blue')
    plt.plot(x2,y2,'or')
    plt.annotate('Target',(x2-1.5,y2+0.6),fontsize=20,color='red')

    plt.grid(False)
    plt.axis('square')
    plt.axis([-2,20,-2,20])
    ax=plt.gca()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
    plt.savefig('MAP/' + room_number + '.png', bbox_inches='tight',pad_inches = 0.1,facecolor = 'k')
    plt.show()
    
if __name__=='__main__':
    main()